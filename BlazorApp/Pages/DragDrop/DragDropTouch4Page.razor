@namespace BlazorApp
@page "/dragdroptouch4"
@using System.Linq
@inject IJSRuntime JSRuntime

<Div Flex="Flex.Column" Width="Width.Is100">
    <Div Flex="Flex.Row" Width="Width.Is100">

        <Div Flex="Flex.Column" Width="Width.Is25"> 
            @foreach (var item in items)
            {
                <Button Clicked="@((args) => ItemSelected(args,@item))" draggable="false">
                    <Figure draggable="false">
                        <FigureImage Source="@item.Image" draggable="false" />
                        <FigureCaption>@item.Name</FigureCaption>
                    </Figure>
                </Button>
            }
        </Div>

        <div @ref="canvas" 
            style="min-width:1500px; touch-action: none; "
             @onpointermove=PointerMove
             @onpointermove:stopPropagation="true"
             @onpointermove:preventDefault="true"
             @onpointerup=PointerUp
             @ontouchmove:preventDefault="true">

            @foreach (var selectedItem in selectedItems)
            {
                <img
                 src="@selectedItem.DropItem.Image"
                 style="@selectedItem.Pos"
                 class="figure-img img-fluid"
                 @ref="selectedItem.Element"
                 @onpointerdown="@((args) => PointerDown(args,@selectedItem))"
                 @onpointerdown:stopPropagation="true"
                 @onpointerdown:preventDefault="true"
                 @ontouchmove:preventDefault="true"/>
            }
        </div>
    </Div>
    <p>CanvasPointerCapture: @canvasHasPointerCapture </p>
    <p>ItemPointerCapture: @itemHasPointerCapture</p>
    <p>Start:@startMsg</p>
    <p>Move:@moveMsg</p>
    <p>End:@endMsg</p>
</Div>


@code {
    private bool pointerDown = false;
    private ElementReference canvas;

    public class DropItem
    {
        public string Name { get; init; }
        public string Group { get; set; }
        public string Image { get; set; }
        public bool Fruit { get; set; }
    }
    public class SelectedItem
    {
        public DropItem DropItem { get; set; }
        public int X { get; set; } = 0;
        public int Y { get; set; } = 0;
        public int CursorXOffset { get; set; }
        public int CursorYOffset { get; set; }
        public int LastX { get; set; }
        public int LastY { get; set; }
        public string Pos => $"position:absolute; top:{Y}px; left:{X}px; width:48px; height:48px;";
        public ElementReference Element { get; set; }
    }
    private List<DropItem> items = new()
    {
        new DropItem() { Name = "Apple", Group = "Basket", Image = "_content/BlazorApp/img/apple.png", Fruit = true },
        new DropItem() { Name = "Bananas", Group = "Basket", Image = "_content/BlazorApp/img/bananas.png", Fruit = true },
    };
    private List<SelectedItem> selectedItems = new();
    private SelectedItem? selectedItem;
    private int lastTouchProcessed;
    private int lastTouchPageX;
    private int lastTouchPageY;
    private Boolean canvasHasPointerCapture;
    private Boolean itemHasPointerCapture;
    private string startMsg = string.Empty;
    private string moveMsg = string.Empty;
    private string endMsg = string.Empty;

    private Task ItemSelected(MouseEventArgs args, DropItem item)
    {
        selectedItems.Add(new SelectedItem()
            {
                DropItem = item,
                X = 150,
                Y = 150
            });
        return Task.CompletedTask;
    }

    private async void PointerDown(PointerEventArgs args, SelectedItem item)
    {
        if (pointerDown || selectedItem is not null)
            return;
        Console.WriteLine(startMsg = "PointerDown");
        moveMsg = string.Empty;
        endMsg = string.Empty;
        pointerDown = true;
        selectedItem = item;

        await JSRuntime.InvokeVoidAsync("releasePointerCapture", item.Element, args.PointerId);
        await JSRuntime.InvokeVoidAsync("setPointerCapture", canvas, args.PointerId);
        canvasHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", canvas, args.PointerId);
        itemHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", item.Element, args.PointerId);
        ;
    }

    private async void PointerMove(PointerEventArgs args)
    {
        if (!pointerDown || selectedItem is null)
            return;
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;

        canvasHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", canvas, args.PointerId);
        itemHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", selectedItem.Element, args.PointerId);

        Console.WriteLine(moveMsg = $"PointerMove x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
    }


    private async void PointerUp(PointerEventArgs args)
    {
        if (selectedItem is null || !pointerDown)
            return;
        Console.WriteLine("PointerUp");
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;

        canvasHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", canvas, args.PointerId);
        itemHasPointerCapture = await JSRuntime.InvokeAsync<Boolean>("hasPointerCapture", selectedItem.Element, args.PointerId);

        Console.WriteLine(endMsg = $"PointerUp x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
        pointerDown = false;
        selectedItem = null;

    }

}
