@namespace BlazorApp 
@page "/dragdrop"


<Div Flex="Flex.Row" Width="Width.Is100">

    <Div Flex="Flex.Column" Width="Width.Is25">
        @foreach (var item in items)
        {
            <Button Clicked="@((args) => ItemSelected(args,@item))" draggable="false">
                <Figure draggable="false">
                    <FigureImage Source="@item.Image" draggable="false"/>
                    <FigureCaption>@item.Name</FigureCaption>
                </Figure>
            </Button>
        }
    </Div>


<div style="min-width:1500px; "
        @onmousemove=MouseMove
        @onmousemove:stopPropagation="true"
        @ondrag:preventDefault="true"
        @ondrag:stopPropagation="true"
        @ondragend=DragEnd
        @ondragend:preventDefault="true"
        @ondragend:stopPropagation="true"
        @onmouseup=MouseUp>


        @foreach(var selectedItem in selectedItems)
    {
        <img draggable="true"
             src="@selectedItem.DropItem.Image"
             style="@selectedItem.Pos"
             class="figure-img img-fluid"
             @ref="selectedItem.Element"
             @onmousedown="@((args) => MouseDown(args, @selectedItem))"
             @onmousedown:stopPropagation="true"
             @onmousedownhttps://0.0.0.0/_content/BlazorApp/img/bananas.png:preventDefault="true"
             @ondragend=DragEnd
             @ondragend:preventDefault="true"
             @ondragend:stopPropagation="true" />

    }
</div>
</Div>


@code {
    private bool mouseDown = false;

    public class DropItem
    {
        public string Name { get; init; }
        public string Group { get; set; }
        public string Image { get; set; }
        public bool Fruit { get; set; }
    }
    public class SelectedItem
    {
        public DropItem DropItem { get; set; }
        public int X { get; set; } = 0;
        public int Y {get; set;} = 0;
        public int CursorXOffset { get; set; }
        public int CursorYOffset { get; set; }
        public int LastX { get; set; }
        public int LastY { get; set; }
        public string Pos => $"position:absolute; top:{Y}px; left:{X}px; width:48px; height:48px;";
        public ElementReference Element { get; set; }
    }
    private List<DropItem> items = new()
    {
        new DropItem() { Name = "Apple", Group = "Basket", Image = "_content/BlazorApp/img/apple.png", Fruit = true },
        new DropItem() { Name = "Bananas", Group = "Basket", Image = "_content/BlazorApp/img/bananas.png", Fruit = true },
        new DropItem() { Name = "Lemon", Group = "Fruit", Image = "_content/BlazorApp/img/lemon.png", Fruit = true },
        new DropItem() { Name = "Broccoli", Group = "Basket", Image = "_content/BlazorApp/img/broccoli.png" },
        new DropItem() { Name = "Strawberry", Group = "Fruit", Image = "_content/BlazorApp/img/strawberry.png", Fruit = true },
        new DropItem() { Name = "Cherry", Group = "Basket", Image = "_content/BlazorApp/img/cherry.png", Fruit = true },
        new DropItem() { Name = "Cabbage", Group = "Vegetable", Image = "_content/BlazorApp/img/cabbage.png" },
    };
    private List<SelectedItem> selectedItems = new();
    private SelectedItem? selectedItem;
    private int xMovement;
    private int yMovement;
    private Task ItemSelected(MouseEventArgs args, DropItem item)
    {
        selectedItems.Add(new SelectedItem()
            {
                DropItem = item,
                X = 150,
                Y = 150
            });
        return Task.CompletedTask;
    }

    private void MouseDown(MouseEventArgs args)
    {
        ;
    }
    private void MouseDown(MouseEventArgs args, SelectedItem item)
    {
        mouseDown = true;
        selectedItem = item;
        xMovement = item.X;
        yMovement = item.Y;
    }
    private void MouseMove(MouseEventArgs args)
    {
        if (!mouseDown || selectedItem is null)
            return;
        selectedItem.X = xMovement += (int)args.MovementX;
        selectedItem.Y = yMovement += (int)args.MovementY;
    }
    private void MouseUp(MouseEventArgs args)
    {
        mouseDown = false;
        selectedItem = null;
    }
    private void DragEnd(DragEventArgs args)
    {
        selectedItem.X = (int)args.ClientX;
        selectedItem.Y = (int)args.ClientY;
        mouseDown = false;
        selectedItem = null;

    }

}
