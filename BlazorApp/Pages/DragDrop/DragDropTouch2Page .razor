@namespace BlazorApp
@page "/dragdroptouch2"
@using System.Linq

<Div Flex="Flex.Column" Width="Width.Is100">
    <Div Flex="Flex.Row" Width="Width.Is100">

        <Div Flex="Flex.Column" Width="Width.Is25">
            @foreach (var item in items)
            {
                <Button Clicked="@((args) => ItemSelected(args,@item))" draggable="false">
                    <Figure draggable="false">
                        <FigureImage Source="@item.Image" draggable="false" />
                        <FigureCaption>@item.Name</FigureCaption>
                    </Figure>
                </Button>
            }
        </Div>

        <div style="min-width:1500px; touch-action: none; "
             @ontouchmove=TouchMove
             @ontouchmove:stopPropagation="true"
             @ontouchmove:preventDefault="true"
             @onmousemove=MouseMove
             @onmousemove:stopPropagation="true"
             @onmousemove:preventDefault="true"
             @ondrag=Drag
             @ondrag:stopPropagation="true"
             @ondrag:preventDefault="true"
             @ontouchend=TouchEnd
             @onmouseup=MouseUp
             @ondragend=DragEnd>

            @foreach (var selectedItem in selectedItems)
            {
                <img draggable="true"
                 src="@selectedItem.DropItem.Image"
                 style="@selectedItem.Pos"
                 class="figure-img img-fluid"
                 @ref="selectedItem.Element"
                 @onmousedown="@((args) => MouseDown(args,@selectedItem))"
                 @onmousedown:stopPropagation="true"
                 @onmousedown:preventDefault="true"
                 @ontouchstart="@((args) => TouchStart(args, @selectedItem))"
                 @ontouchstart:stopPropagation="true"
                 @ontouchstart:preventDefault="true"
                 @ondragstart="@((args) => DragStart(args, @selectedItem))"
                 @ondragstart:stopPropagation="true"
                 @ondragstart:preventDefault="true" />

            }
        </div>
    </Div>
    <p>Start:@startMsg</p>
    <p>Move:@moveMsg</p>
    <p>End:@endMsg</p>
</Div>


@code {
    private bool mouseDown = false;

    public class DropItem
    {
        public string Name { get; init; }
        public string Group { get; set; }
        public string Image { get; set; }
        public bool Fruit { get; set; }
    }
    public class SelectedItem
    {
        public DropItem DropItem { get; set; }
        public int X { get; set; } = 0;
        public int Y { get; set; } = 0;
        public int CursorXOffset { get; set; }
        public int CursorYOffset { get; set; }
        public int LastX { get; set; }
        public int LastY { get; set; }
        public string Pos => $"position:absolute; top:{Y}px; left:{X}px; width:48px; height:48px;";
        public ElementReference Element { get; set; }
    }
    private List<DropItem> items = new()
    {
        new DropItem() { Name = "Apple", Group = "Basket", Image = "_content/BlazorApp/img/apple.png", Fruit = true },
        new DropItem() { Name = "Bananas", Group = "Basket", Image = "_content/BlazorApp/img/bananas.png", Fruit = true },
    };
    private List<SelectedItem> selectedItems = new();
    private SelectedItem? selectedItem;
    private int lastTouchProcessed;
    private int lastTouchPageX;
    private int lastTouchPageY;
    private string startMsg = string.Empty;
    private string moveMsg = string.Empty;
    private string endMsg = string.Empty;

    private Task ItemSelected(MouseEventArgs args, DropItem item)
    {
        selectedItems.Add(new SelectedItem()
            {
                DropItem = item,
                X = 150,
                Y = 150
            });
        return Task.CompletedTask;
    }

    private void TouchStart(TouchEventArgs args, SelectedItem item)
    {
        if (mouseDown | selectedItem is not null)
            return;
        Console.WriteLine(startMsg = "TouchStart");
        moveMsg = string.Empty;
        endMsg = string.Empty;
        mouseDown = true;
        selectedItem = item;
        lastTouchProcessed = 0;
        lastTouchPageX = (int)args.Touches[^1].PageX;
        lastTouchPageY = (int)args.Touches[^1].PageY;

        //item.CursorXOffset = item.X - (int)args.Touches[^1].ClientX;
        //item.CursorYOffset = item.Y - (int)args.Touches[^1].ClientY;
    }

    private void MouseDown(MouseEventArgs args, SelectedItem item)
    {
        if (mouseDown || selectedItem is not null)
            return;
        Console.WriteLine(startMsg = "MouseDown");
        moveMsg = string.Empty;
        endMsg = string.Empty;
        mouseDown = true;
        selectedItem = item;
        ;
    }

    private void DragStart(DragEventArgs args, SelectedItem item)
    {
        if (mouseDown || selectedItem is not null)
            return;
        Console.WriteLine(startMsg = "DragStart");
        moveMsg = string.Empty;
        endMsg = string.Empty;
        mouseDown = true;
        selectedItem = item;
    }

    private void TouchMove(TouchEventArgs args)
    {
        if (!mouseDown || selectedItem is null || args.ChangedTouches.Length == 0)
            return;
        var movementX = (int)args.ChangedTouches[^1].PageX - lastTouchPageX;
        lastTouchPageX = (int)args.ChangedTouches[^1].PageX;
        var movementY = (int)args.ChangedTouches[^1].PageY - lastTouchPageY; ;
        lastTouchPageY = (int)args.ChangedTouches[^1].PageY;

        selectedItem.X += movementX;
        selectedItem.Y += movementY;
        Console.WriteLine(moveMsg = $"TouchMove x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
    }

    private void MouseMove(MouseEventArgs args)
    {
        if (!mouseDown || selectedItem is null)
            return;
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;
        Console.WriteLine(moveMsg = $"MouseMove x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
    }

    private void Drag(DragEventArgs args)
    {
        if (!mouseDown || selectedItem is null)
            return;
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;
        Console.WriteLine(moveMsg = $"Drag x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
    }

    private void TouchEnd(TouchEventArgs args)
    {
        if (selectedItem is null || !mouseDown)
            return;
        if (args.Touches.Length > 0)
        {
            var movementX = (args.Touches.Length == 1) ? 0 : (int)args.Touches[^1].PageX - (int)args.Touches[^2].PageX;
            var movementY = (args.Touches.Length == 1) ? 0 : (int)args.Touches[^1].PageY - (int)args.Touches[^2].PageY;

            selectedItem.X += movementX;
            selectedItem.Y += movementY;
            Console.WriteLine(endMsg = $"TouchEnd x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
        }
        else Console.WriteLine(endMsg = $"TouchEnd - no movement");
        mouseDown = false;
        selectedItem = null;

    }

    private void MouseUp(MouseEventArgs args)
    {
        if (selectedItem is null || !mouseDown)
            return;
        Console.WriteLine("MouseUp");
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;
        Console.WriteLine(endMsg = $"MouseUp x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
        mouseDown = false;
        selectedItem = null;

    }

    private void DragEnd(DragEventArgs args)
    {
        if (selectedItem is null || !mouseDown)
            return;
        Console.WriteLine("DragEnd");
        var movementX = (int)args.MovementX;
        selectedItem.X += movementX;
        var movementY = (int)args.MovementY;
        selectedItem.Y += movementY;
        Console.WriteLine(endMsg = $"DragEnd x:{selectedItem.X} y:{selectedItem.Y} deltaX: {movementX} deltaY:{movementY}");
        mouseDown = false;
        selectedItem = null;
    }

}
