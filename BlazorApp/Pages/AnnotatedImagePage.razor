@namespace BlazorApp 
@page "/annotatedimage"
@inject IJSRuntime JSRuntime 
<h3>AnnotatedImagePage</h3>

<Div Flex="Flex.Column">
    <Div Flex="Flex.Row">
        @* Available Items *@
        <Div Flex="Flex.Column" style="max-width:6rem;">
            @foreach (var item in fruits)
            {
                <Button Clicked="@((args) => ItemSelected(args,@item))" draggable="false">
                    <Figure draggable="false">
                        <FigureImage Source="@item.Image" draggable="false" />
                        <FigureCaption>@item.Name</FigureCaption>
                    </Figure>
                </Button>
            }
            <Button Color="Color.Primary" Clicked="Merge">Merge</Button>
            <Button Color="Color.Primary" Clicked="Reverse">Reverse</Button>
            <Button Color="Color.Primary" Clicked="Clear">Clear</Button>
        </Div>

        @* Annotated Image *@
        <AnnotatedImage 
            @ref="@annotatedImage"
            ImageAnnotations="@fruitItems"
            Source="_content/BlazorApp/img/EmptyWeddingHall.png" />
    </Div>
    <img src="@imgdata" width="@imgwidth" height="@imgheight" />
</Div>

@code {

    public class SelectedFruitItem : IImageAnnotationData
    {
        public string Id { get; set; } = string.Empty;
        public int Order { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public string Source { get; set; } = string.Empty;
        public double Width { get; set; }
        public double Height { get; set; }
        public double Scale { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Note { get; set; } = string.Empty;
    }

    private AnnotatedImage? annotatedImage;
    private string imgdata = string.Empty;
    private double imgwidth;
    private double imgheight;
    private Dictionary<string, IImageAnnotationData> fruitItems = new();
    private int order;

    public class FruitItem
    {
        public string Name { get; init; }
        public string Image { get; set; }
    }
    private List<FruitItem> fruits = new()
    {
        new FruitItem() { Name = "Apple", Image = "_content/BlazorApp/img/apple.png"},
        new FruitItem() { Name = "Bananas", Image = "_content/BlazorApp/img/bananas.png"}
    };
    private async Task ItemSelected(MouseEventArgs args, FruitItem item)
    {
        if (annotatedImage is null)
            return;
        var imageWidth = annotatedImage.ImgElementWidth;
        var imageHeight = annotatedImage.ImgElementHeight;
        var id = Guid.NewGuid().ToString();
        fruitItems.Add(id, new SelectedFruitItem()
            {
                Id = id,
                Order = order++,
                Name = item.Name,
                Source = item.Image,
                X = imageWidth / 2,
                Y = imageHeight / 2,
                Height = 48,
                Width = 48,
                Scale = 1
            });

        await Task.CompletedTask;
    }

    private async Task Clear()
    {
        fruitItems.Clear();
        await Task.CompletedTask;
    }

    private async Task Reverse()
    {
        // Note: For folks that don't like to see side-effects in 
        // linq queries, the ToList().ForEach(...) may seem objectionable.
        // I don't buy it. Once you have list you can just do what you need
        // to with it.
        var order = 0;
        fruitItems
            .Values
            .OrderBy(x => x.Order)
            .Select(x => x.Id)
            .Reverse()
            .ToList() 
            .ForEach(id => fruitItems[id].Order = order++);

        // Alternative - I do not find this easier to read
        //foreach (var id in fruitItems
        //    .Values
        //    .OrderBy(x => x.Order)
        //    .Select(x => x.Id)
        //    .Reverse()
        //    .ToList()
        //    )
        //    fruitItems[id].Order = order++;

        await Task.CompletedTask;
    }

    public async Task Merge()
    {
        if (annotatedImage is null)
            return;
        imgdata = await annotatedImage!.GetMergedEncodedImage();
        imgwidth = annotatedImage.ImgElementWidth;
        imgheight = annotatedImage.ImgElementHeight;
        await InvokeAsync(StateHasChanged);
    }

}
