@namespace BlazorApp 
@page "/annotatedimage"
<h3>AnnotatedImagePage</h3>

<Div Flex="Flex.Column">
    <Div Flex="Flex.Row">
        @* Available Items *@
        <Div Flex="Flex.Column" style="max-width:6rem;">
            @foreach (var item in items)
            {
                <Button Clicked="@((args) => ItemSelected(args,@item))" draggable="false">
                    <Figure draggable="false">
                        <FigureImage Source="@item.Image" draggable="false" />
                        <FigureCaption>@item.Name</FigureCaption>
                    </Figure>
                </Button>
            }
            <Button Color="Color.Primary" Clicked="Merge">Merge</Button>
        </Div>

        @* Annotated Image *@
        <AnnotatedImage 
            @ref="@annotatedImage"
            Source="_content/BlazorApp/img/EmptyWeddingHall.png" />
    </Div>
    <img src="@imgdata" width="@imgwidth" height="@imgheight" />

</Div>


@code {

public class FruitItems : IImageAnnotationData
{
    public double X { get; set; }
    public double Y { get; set; }
    public string Source { get; set; } = string.Empty;
    public double Width { get; set; }
    public double Height { get; set; }
    public string Name { get; set; } = string.Empty;
    public double Scale { get; set; }   
}

    private AnnotatedImage? annotatedImage;
    private string imgdata = string.Empty;
    private double imgwidth;
    private double imgheight;

    public class DropItem
    {
        public string Name { get; init; }
        public string Image { get; set; }
    }
    private List<DropItem> items = new()
    {
        new DropItem() { Name = "Apple", Image = "_content/BlazorApp/img/apple.png"},
        new DropItem() { Name = "Bananas", Image = "_content/BlazorApp/img/bananas.png"}
    };

    private async Task ItemSelected(MouseEventArgs args, DropItem item)
    {
        var imageWidth = annotatedImage.ImgElementWidth;
        var imageHeight = annotatedImage.ImgElementHeight;

        var selectedItem = new FruitItems()
            {
                Name = item.Name,
                Source = item.Image,
                X = imageWidth / 2,
                Y = imageHeight / 2,
                Height = 48,
                Width = 48,
                Scale = 1
            };

        await annotatedImage!.AddAnnotation(selectedItem);
        await Task.CompletedTask;
    }

    public async Task Merge()
    {
        var sKImage = await annotatedImage!.GetImage();
        var info = new SKImageInfo(sKImage.Width, sKImage.Height);
        using (var surface = SKSurface.Create(info))
        {
            var canvas = surface.Canvas;
            canvas.DrawImage(sKImage, new SKPoint(0, 0));
            imgdata = "data:image/png;base64,"
            + Convert.ToBase64String(
                surface.Snapshot()
                .Encode(SKEncodedImageFormat.Png, 100)
                .ToArray());
            imgwidth = sKImage.Width;
            imgheight = sKImage.Height;

        }

    }
}
